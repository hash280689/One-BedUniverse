using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using static HPP.GlobalEnums;

namespace HPP.Grid
{
    /// <summary>
    /// GridItem generated by Controller
    /// </summary>
    /// 

    public class GridItem : MonoBehaviour
    {
        [SerializeField] GridColourPallete m_NeutralPallete;
        [SerializeField] GridColourPallete m_UAColourPallete;
        [SerializeField] GridColourPallete m_UBColourPallete;
        [SerializeField] MeshRenderer m_GridItemMeshRenderer;

        public enum ColourVariant { Variant0, Variant1}

        [SerializeField] private UniverseType m_UniverseType;
        [SerializeField] private ColourVariant m_ColourVariant;

        public UniverseType GridUniverseType => m_UniverseType;
        public ColourVariant GridColourVariant => m_ColourVariant;

        [SerializeField] private int m_XRef;
        [SerializeField] private int m_YRef;

        public int XRef => m_XRef;
        public int YRef => m_YRef;

        private GridColourPallete GetColourPallete(UniverseType universeType)
        {
            switch (universeType)
            {
                case UniverseType.Neutral:
                    return m_NeutralPallete;
                case UniverseType.UniverseA:
                    return m_UAColourPallete;
                case UniverseType.UniverseB:
                    return m_UBColourPallete;
                default:
                    return null;
            }
        }

        private Material GetBaseMaterial(ColourVariant colourVariant, UniverseType universeType)
        {
            GridColourPallete colourPallete = GetColourPallete(universeType);
            return colourVariant == ColourVariant.Variant0 ?
                colourPallete.BaseMaterial0 :
                colourPallete.BaseMaterial1;
        }

        private Material GetHighlightMaterial(ColourVariant colourVariant, UniverseType universeType)
        {
            GridColourPallete colourPallete = GetColourPallete(universeType);
            return colourVariant == ColourVariant.Variant0 ?
                colourPallete.HighlightMaterial0 :
                colourPallete.HighlightMaterial0;
        }

        public void SetListRefs(int xRef, int yRef)
        {
            m_XRef = xRef;
            m_YRef = yRef;
        }

        public void SetGridItemProperties(ColourVariant colourVariant, UniverseType universeType, InteractionType interactionType = InteractionType.DefaultState)
        {
            m_GridItemMeshRenderer.material = GetBaseMaterial(colourVariant, universeType);
            if (interactionType != InteractionType.Null)
            {
                SetInteractiveStatus(interactionType);
            }
            m_UniverseType = universeType;
            m_ColourVariant = colourVariant;
        }

        public void SetGridItemProperties(bool isBaseColour0, UniverseType universeType, InteractionType interactionType = InteractionType.DefaultState)
        {
            SetGridItemProperties(isBaseColour0 ? ColourVariant.Variant0 : ColourVariant.Variant1, universeType, interactionType);
        }

        public void SetInteractiveStatus(InteractionType interactionType)
        {
            switch (interactionType)
            {
                case InteractionType.DefaultState:
                    m_GridItemMeshRenderer.material = GetBaseMaterial(m_ColourVariant, m_UniverseType);
                    break;
                case InteractionType.BasicTileHit:
                    //break;
                case InteractionType.Interactable:
                    //break;
                case InteractionType.Reclaimable:
                    m_GridItemMeshRenderer.material = GetHighlightMaterial(m_ColourVariant, m_UniverseType);
                    break;
            }
        }

        public void SetUniverseType(UniverseType universeType)
        {
            SetGridItemProperties(m_ColourVariant, universeType);
        }
        
        public void SetColourVariant(ColourVariant colourVariant)
        {
            SetGridItemProperties(colourVariant, m_UniverseType);
        }    

        public void SetColourVariant(bool isBaseColour0)
        {
            SetColourVariant(isBaseColour0 ? ColourVariant.Variant0 : ColourVariant.Variant1);
        }

        public void SetLocalPosition(Vector2 newPosition)
        {
            SetLocalPosition(new Vector3(newPosition.x, 0, newPosition.y));
        }

        public void SetLocalPosition(float x, float y)
        {
            SetLocalPosition(new Vector2(x, y));
        }

        public void SetLocalPosition(Vector3 newPosition)
        {
            transform.localPosition = newPosition;
        }
    }
}
